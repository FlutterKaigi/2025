name: Deploy Conference App (Web)

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - apps/app/**
  workflow_dispatch:
    inputs:
      environment:
        description: "Deploy environment"
        required: true
        default: "preview"
        type: choice
        options:
          - preview
          - production

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

concurrency:
  group: "deploy-conference-app-web"
  cancel-in-progress: false

jobs:
  define-environment:
    runs-on: ubuntu-24.04
    outputs:
      environment: ${{ steps.define-environment.outputs.environment }}
    steps:
      - name: Define environment
        id: define-environment
        run: |
          environment=${{ inputs.environment }}
          if [ -z "$environment" ]; then
            environment=${{ github.event_name == 'push' && 'production' || 'preview' }}
          fi
          echo "Setting environment to $environment"
          echo "environment=$environment" >> $GITHUB_OUTPUT

  start-deploy-conference-app-web:
    needs:
      - define-environment
    if: ${{ needs.define-environment.outputs.environment == 'production' }}
    runs-on: ubuntu-24.04
    timeout-minutes: 1
    outputs:
      deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    steps:
      # https://github.com/bobheadxi/deployments
      - name: Start deployment
        uses: bobheadxi/deployments@648679e8e4915b27893bd7dbc35cb504dc915bc8 # v1.5.0
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: app
          ref: ${{ github.head_ref }}

  build-conference-app-web:
    needs:
      - define-environment
    runs-on: ubuntu-24.04
    outputs:
      build_log: ${{ steps.build.outputs.LOG }}
    timeout-minutes: 5
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # https://github.com/jdx/mise-action
      - name: Install Mise dependencies
        uses: jdx/mise-action@5083fe46898c414b2475087cc79da59e7da859e8 # v2.1.11
        with:
          install_args: "flutter"

      - name: Resolve dependencies
        working-directory: apps/app
        run: |
          dart pub get

      - name: Build Flutter Web App
        id: build
        working-directory: apps/app
        run: |
          {
            echo "LOG<<EOL"
            flutter build web --wasm 2>&1
            echo "EOL"
          } | tee -a $GITHUB_OUTPUT

      - name: Upload Flutter app Artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: app-artifacts
          path: apps/app/build/web/

  deploy-conference-app-web:
    runs-on: ubuntu-24.04
    needs:
      - define-environment
      - build-conference-app-web
    timeout-minutes: 5
    env:
      MISE_ENV: ci
    outputs:
      deployment_url: ${{ steps.extract-deployment-url.outputs.DEPLOYMENT_URL }}
      logs: ${{ steps.extract-logs.outputs.LOG }}
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Download Flutter App Artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: app-artifacts
          path: apps/app/build/web/

      - name: Extract SOPS secrets
        run: |
          mkdir -p ~/.config/mise
          echo "${{ secrets.SOPS_FILE }}" > ~/.config/mise/flutterkaigi.txt

      # https://github.com/jdx/mise-action
      - name: Install Mise dependencies
        uses: jdx/mise-action@5083fe46898c414b2475087cc79da59e7da859e8 # v2.1.11
        with:
          install_args: "bun"

      - name: Install dependencies
        working-directory: apps/app
        run: bun install --frozen-lockfile

      - name: Deploy app (Preview)
        if: ${{ needs.define-environment.outputs.environment != 'production' }}
        id: deploy-preview
        working-directory: apps/app
        run: |
          {
            echo "LOG<<EOL"
            bunx wrangler versions upload 2>&1
            echo "EOL"
          } | tee -a $GITHUB_OUTPUT

      - name: Deploy app (Production)
        if: ${{ needs.define-environment.outputs.environment == 'production' }}
        id: deploy-production
        working-directory: apps/app
        run: |
          {
            echo "LOG<<EOL"
            bunx wrangler deploy 2>&1
            echo "EOL"
          } | tee -a $GITHUB_OUTPUT

      - name: Extract deployment URL
        id: extract-deployment-url
        run: |
          if [ -z "${{ steps.deploy-preview.outputs.LOG }}" ]; then
            LOG="${{ steps.deploy-production.outputs.LOG }}"
          else
            LOG="${{ steps.deploy-preview.outputs.LOG }}"
          fi

          # `https://` „ÇíÂê´„ÇÄÊúÄÂàù„ÅÆË°å„Å†„Åë„ÇíÊäΩÂá∫„Åó„ÄÅDEPLOYMENT_URL„Å´Ê†ºÁ¥ç
          DEPLOYMENT_URL=$(echo "$LOG" | grep -o 'https://[^ ]*' | head -n 1)
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Extract timestamp
        id: extract-timestamp
        env:
          TZ: Asia/Tokyo
        run: |
          echo "timestamp=$(date -Iseconds )" >> $GITHUB_OUTPUT

      - name: Extract logs
        id: extract-logs
        run: |
          echo "LOG<<EOF" >> $GITHUB_OUTPUT
          cat <<EOL | tee -a $GITHUB_OUTPUT
          ## üì± Flutter App Preview Deployment
          üîóURL: ${{ steps.extract-deployment-url.outputs.DEPLOYMENT_URL }}

          üîëCommit Hash: \`${{ github.sha }}\`
          üìÖTimestamp: \`${{ steps.extract-timestamp.outputs.TIMESTAMP }}\`

          <details>
          <summary><h2>üì¶Ô∏è Build Logs</h2></summary>

          \`\`\`log
          ${{ needs.build-conference-app-web.outputs.build_log }}
          \`\`\`
          </details>

          <details>
          <summary><h2>‚úàÔ∏è Deployment Logs</h2></summary>

          \`\`\`log
          ${{ steps.deploy-preview.outputs.LOG }}
          \`\`\`
          </details>
          EOL
          echo "EOF" >> $GITHUB_OUTPUT

      # https://github.com/thollander/actions-comment-pull-request
      - name: Comment PR with execution number
        uses: thollander/actions-comment-pull-request@24bffb9b452ba05a4f3f77933840a6a841d1b32b # v3.0.1
        if: ${{ github.event_name == 'pull_request' }}
        with:
          message: |
            ${{ steps.extract-logs.outputs.LOG }}
          comment-tag: deploy-conference-app-web

  update-deployment-status:
    runs-on: ubuntu-24.04
    needs:
      - define-environment
      - deploy-conference-app-web
      - start-deploy-conference-app-web
    if: ${{ needs.define-environment.outputs.environment == 'production' && !cancelled() }}
    timeout-minutes: 1
    steps:
      - name: Get previous jobs status
        id: get-previous-jobs-status
        run: |
          function echo-needs() {
            echo '${{ toJSON(needs) }}'
          }
          echo-needs
          did_failure=$(echo-needs | jq '[.[].result] | any(. != "success")')
          if [ "$did_failure" = "true" ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      # https://github.com/bobheadxi/deployments
      - name: Update deployment status
        uses: bobheadxi/deployments@648679e8e4915b27893bd7dbc35cb504dc915bc8 # v1.5.0
        id: deployment
        if: ${{ !cancelled() }}
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ steps.get-previous-jobs-status.outputs.status || 'failure' }}
          deployment_id: ${{ needs.start-deploy-conference-app-web.outputs.deployment_id }}
          env: app
          env_url: ${{ needs.deploy-conference-app-web.outputs.deployment_url }}
          ref: ${{ github.head_ref }}
          auto_inactive: true
