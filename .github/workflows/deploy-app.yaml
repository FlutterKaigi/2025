name: Deploy App
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

on:
  push:
  workflow_dispatch:
    inputs:
      ios:
        description: "Build iOS app"
        required: false
        default: true
        type: boolean
      android:
        description: "Build Android app"
        required: false
        default: true
        type: boolean
      macos:
        description: "Build macOS app"
        required: false
        default: true
        type: boolean

jobs:
  define-matrix:
    runs-on: ubuntu-24.04
    timeout-minutes: 1
    outputs:
      deploy-ios: ${{ steps.define-environment-matrix.outputs.deploy-ios }}
      deploy-android: ${{ steps.define-environment-matrix.outputs.deploy-android }}
      deploy-macos: ${{ steps.define-environment-matrix.outputs.deploy-macos }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Decide which app to deploy
        id: define-environment-matrix
        run: |
          platforms=()
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ inputs.ios }}" = "true" ]; then
              platforms+=("ios")
            fi
            if [ "${{ inputs.android }}" = "true" ]; then
              platforms+=("android")
            fi
            if [ "${{ inputs.macos }}" = "true" ]; then
              platforms+=("macos")
            fi
          elif [ "${{ github.event_name }}" = "push" ]; then
            platforms+=("ios" "android" "macos")
          else
            echo "Unknown event name: ${{ github.event_name }}"
            exit 1
          fi

          echo "デプロイするプラットフォーム: ${platforms[@]}"
          for platform in "${platforms[@]}"; do
            echo "deploy-${platform}=true" >> $GITHUB_OUTPUT
          done

  build-ios:
    needs: define-matrix
    if: ${{ needs.define-matrix.outputs.deploy-ios }}
    runs-on: macos-latest
    timeout-minutes: 30
    env:
      MISE_ENV: ci
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Extract SOPS secrets
        run: |
          mkdir -p ~/.config/mise
          echo "${{ secrets.SOPS_FILE }}" > ~/.config/mise/flutterkaigi.txt

      # https://github.com/jdx/mise-action
      - name: Install Mise dependencies
        uses: jdx/mise-action@5083fe46898c414b2475087cc79da59e7da859e8 # v2.1.11
        with:
          install_args: "flutter xcbeautify"

      - name: Resolve dependencies
        working-directory: app
        run: dart pub get --enforce-lockfile

      - name: Configure iOS
        working-directory: app
        run: |
          flutter build ios --config-only \
            --dart-define-from-file=environments/.env.prod

      - name: Extract App Store Connect API Key
        working-directory: app/ios
        run: |
          echo "$APP_STORE_CONNECT_API_KEY_BASE64" | base64 -d \
            > AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
          ls -l AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8

      - name: Archive
        working-directory: app
        run: |
          xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -sdk iphoneos \
            -configuration Release archive \
            -archivePath build/ios/Runner.xcarchive \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            CODE_SIGNING_REQUIRED=YES \
            CODE_SIGNING_ALLOWED=YES | xcbeautify

          xcodebuild -exportArchive \
            -archivePath build/ios/Runner.xcarchive \
            -exportOptionsPlist ios/ExportOptions.plist \
            -exportPath . \
            -allowProvisioningUpdates \
            -authenticationKeyIssuerID $APP_STORE_CONNECT_API_KEY_ISSUER_ID \
            -authenticationKeyID $APP_STORE_CONNECT_API_KEY_ID \
            -authenticationKeyPath ${{ github.workspace }}/app/ios/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8 \
          | xcbeautify

      - name: List files
        run: |
          ls -lah app/
          echo "---"
          ls -lah app/build/

      - name: Upload ipa as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: Runner.ipa
          path: app/Runner.ipa
          if-no-files-found: error

  deploy-ios:
    needs: build-ios
    runs-on: macos-latest
    timeout-minutes: 10
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Extract SOPS secrets
        run: |
          mkdir -p ~/.config/mise
          echo "${{ secrets.SOPS_FILE }}" > ~/.config/mise/flutterkaigi.txt

      # https://github.com/jdx/mise-action
      - name: Install Mise dependencies
        uses: jdx/mise-action@5083fe46898c414b2475087cc79da59e7da859e8 # v2.1.11
        with:
          install_args: "xcbeautify"

      - name: Extract App Store Connect API Key
        working-directory: app/ios
        run: |
          echo "$APP_STORE_CONNECT_API_KEY_BASE64" | base64 -d \
            > AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
          ls -l AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8

      # https://github.com/actions/download-artifact
      - name: Download ipa
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: Runner.ipa
          path: build

      - name: List files
        run: ls -lah build/

      - name: Extract App Store Connect API Key
        run: |
          mkdir ~/.private_keys
          echo "$APP_STORE_CONNECT_API_KEY_BASE64" | base64 -d \
            > ~/.private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
          ls -l ~/.private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8

      - name: Upload Ipa to App Store Connect
        run: |
          xcrun altool \
            --upload-app \
            -f build/Runner.ipa \
            --type ios \
            --apiIssuer $APP_STORE_CONNECT_API_KEY_ISSUER_ID \
            --apiKey $APP_STORE_CONNECT_API_KEY_ID \

  # build-android:
  #   needs: define-matrix
  #   if: ${{ needs.define-matrix.outputs.deploy-android }}
  #   runs-on: ubuntu-24.04
  #   timeout-minutes: 30
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
  #       with:
  #         fetch-depth: 0

  #     - name: Setup application runtime & Resolve dependencies
  #       uses: ./.github/actions/setup-application-runtime

  #     # Java 17を明示的に設定
  #     - name: Setup Java
  #       uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
  #       with:
  #         distribution: 'temurin'
  #         java-version: '17'

  #     - name: Accept Android License
  #       run: yes | flutter doctor --android-licenses || true

  #     - name: Extract keystore
  #       run: |
  #         echo '${{ secrets.SIGNING_KEY }}' | base64 -d > app/android/app/key.jks
  #         echo '${{ secrets.FIREBASE_ANDROID }}' | base64 -d > app/android/app/google-services.json
  #         echo '${{ secrets.KEY_PROPERTIES }}' | base64 -d  > app/android/key.properties

  #     - name: Extract Dotenv
  #       run: |
  #         echo "${{ secrets.DOTENV }}" | base64 -d > environment.tar.gz
  #         tar -xzf environment.tar.gz
  #         rm environment.tar.gz
  #         ls -l environment/

  #     - name: Install Codemagic CLI Tools
  #       run: |
  #         pip3 install codemagic-cli-tools

  #     - name: Fetch latest build number from Google Play Store
  #       id: fetch-latest-build-number
  #       run: |
  #         echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" > service-account.json
  #         LATEST_BUILD_NUMBER=$(google-play get-latest-build-number \
  #           --credentials="@file:service-account.json" \
  #           --package-name="net.yumnumm.eqmonitor" || echo "0")
  #         BUILD_NUMBER=$((LATEST_BUILD_NUMBER + 1))
  #         echo "BUILD_NUMBER=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
  #         echo "Build Number set to ${BUILD_NUMBER}."
  #         rm service-account.json

  #     # Flutterのキャッシュをクリア
  #     - name: Clean Flutter cache
  #       run: |
  #         flutter clean
  #         flutter pub get

  #     - name: Build Android (AAB)
  #       working-directory: app
  #       env:
  #         BUILD_NUMBER: ${{ steps.fetch-latest-build-number.outputs.BUILD_NUMBER }}
  #       run: |
  #         flutter build appbundle \
  #           --release \
  #           --build-number=${BUILD_NUMBER} \
  #           --dart-define-from-file=../environment/.env.prod

  #     - name: Build Android (APK)
  #       working-directory: app
  #       env:
  #         BUILD_NUMBER: ${{ steps.fetch-latest-build-number.outputs.BUILD_NUMBER }}
  #       run: |
  #         flutter build apk \
  #           --release \
  #           --build-number=${BUILD_NUMBER} \
  #           --dart-define-from-file=../environment/.env.prod

  #     - name: Upload aab as artifact
  #       uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
  #       with:
  #         name: EQMonitor-android.aab
  #         path: app/build/app/outputs/bundle/release/app-release.aab
  #         if-no-files-found: error

  #     - name: Upload apk as artifact
  #       uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
  #       with:
  #         name: EQMonitor-android.apk
  #         path: app/build/app/outputs/flutter-apk/app-release.apk
  #         if-no-files-found: error

  # deploy-android:
  #   needs: build-android
  #   runs-on: ubuntu-24.04
  #   timeout-minutes: 10
  #   steps:
  #     - name: Download artifact aab
  #       uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
  #       with:
  #         name: EQMonitor-android.aab
  #         path: build

  #     - name: Upload to Google Play
  #       uses: r0adkll/upload-google-play@935ef9c68bb393a8e6116b1575626a7f5be3a7fb #v1.1.3
  #       with:
  #         serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
  #         packageName: net.yumnumm.eqmonitor
  #         releaseFiles: build/app-release.aab
  #         track: internal
  #         status: completed
  #         # 既存ユーザーへのアップデートを許可
  #         changesNotSentForReview: false
