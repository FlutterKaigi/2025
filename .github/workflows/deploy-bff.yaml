name: Deploy BFF

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - "bff/**"
  workflow_dispatch:
    inputs:
      deploy-production:
        description: "Deploy to production"
        required: false
        default: false
        type: boolean
      deploy-staging:
        description: "Deploy to staging"
        required: false
        default: false
        type: boolean

concurrency:
  group: "deploy-bff"
  cancel-in-progress: false

jobs:
  define-matrix:
    runs-on: ubuntu-24.04
    timeout-minutes: 1
    outputs:
      environments: ${{ steps.define-matrix.outputs.environments }}
      deploy-production: ${{ steps.define-matrix.outputs.deploy-production }}
      deploy-staging: ${{ steps.define-matrix.outputs.deploy-staging }}
    steps:
      - name: Define matrix
        id: define-matrix
        run: |
          environments=()
          # workflow_dispatchの場合
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ inputs.deploy-staging }}" = "true" ]; then
              environments+=("staging")
            fi
            if [ "${{ inputs.deploy-production }}" = "true" ]; then
              environments+=("production")
            fi
          # pushの場合
          elif [ "${{ github.event_name }}" = "push" ]; then
            environments+=("production")
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            environments+=("staging")
          fi

          # 空だった場合はエラー
          if [ -z "${environments[@]}" ]; then
            echo "Error: No environment selected"
            exit 1
          fi

          echo "Deploying to ${environments[@]}"
          # JSONに変換し、環境変数にセット
          echo "environments=$(jq -c -n '$ARGS.positional' --args "${environments[@]}")" >> $GITHUB_OUTPUT

          function has_value() {
            local target="$1"
            local value="$2"
            for element in $target; do
              if [ "$element" = "$value" ]; then
                echo "true"
                return
              fi
            done
            echo "false"
          }

  start-deploy-bff:
    needs:
      - define-matrix
    if: ${{ contains(fromJson(needs.define-matrix.outputs.environments), 'production') }}
    runs-on: ubuntu-24.04
    timeout-minutes: 1
    outputs:
      deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    steps:
      # https://github.com/bobheadxi/deployments
      - name: Start deployment
        uses: bobheadxi/deployments@648679e8e4915b27893bd7dbc35cb504dc915bc8 # v1.5.0
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: bff
          ref: ${{ github.head_ref }}

  build-dart-engine:
    needs:
      - define-matrix
    strategy:
      matrix:
        environment: ${{ fromJson(needs.define-matrix.outputs.environments) }}
    outputs:
      log: ${{ steps.build-dart-engine.outputs.LOG }}
    runs-on: ubuntu-24.04
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # https://github.com/jdx/mise-action
      - name: Install Mise dependencies
        uses: jdx/mise-action@5083fe46898c414b2475087cc79da59e7da859e8 # v2.1.11
        with:
          install_args: "flutter"

      - name: Resolve dependencies
        working-directory: bff/engine
        run: dart pub get

      - name: Build Dart Engine
        working-directory: bff/engine
        id: build-dart-engine
        run: |
          {
            echo "LOG<<EOL"
            dart compile wasm \
              lib/main.dart \
              -o build/main.wasm \
              -O4
            echo "EOL"
          } | tee -a $GITHUB_OUTPUT

      - name: Upload Dart BFF Artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: bff-engine-artifact-${{ matrix.environment }}
          path: bff/engine/build

  get-supabase-connection-info:
    env:
      MISE_ENV: ci
    needs:
      - define-matrix
    strategy:
      matrix:
        environment: ${{ fromJson(needs.define-matrix.outputs.environments) }}
    outputs:
      SUPABASE_PROJECT_ID_STAGING: ${{ steps.get-supabase-connection-info.outputs.SUPABASE_PROJECT_ID_STAGING }}
      SUPABASE_PROJECT_ID_PRODUCTION: ${{ steps.get-supabase-connection-info.outputs.SUPABASE_PROJECT_ID_PRODUCTION }}
    runs-on: ubuntu-24.04
    timeout-minutes: 2
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # https://github.com/jdx/mise-action
      - name: Install Mise dependencies
        uses: jdx/mise-action@5083fe46898c414b2475087cc79da59e7da859e8 # v2.1.11
        with:
          install_args: "terraform"

      - name: Extract SOPS secrets
        run: |
          mkdir -p ~/.config/mise
          echo "${{ secrets.SOPS_FILE }}" > ~/.config/mise/flutterkaigi.txt

      - name: Set environment variables
        run: |
          for line in $(mise env --dotenv); do
            echo $line >> "$GITHUB_ENV"
            echo "::add-mask::${line#*=}"
          done

      - name: Extract backend.tfbackend
        working-directory: terraform/supabase
        run: |
          echo "${{ secrets.TERRAFORM_BACKEND_CONFIGURATION }}" | base64 -d  \
            > backend.tfbackend

      - name: Terraform init
        working-directory: terraform/supabase
        run: terraform init -backend-config=backend.tfbackend

      - name: Get Supabase Connection Info
        working-directory: terraform/supabase
        id: get-supabase-connection-info
        run: |
          SUPABASE_PROJECT_ID=""
          if [ "${{ matrix.environment }}" = "staging" ]; then
            SUPABASE_PROJECT_ID=$(terraform output -raw supabase_staging_project_id)
            echo "SUPABASE_PROJECT_ID_STAGING=$SUPABASE_PROJECT_ID" >> $GITHUB_OUTPUT
          else
            SUPABASE_PROJECT_ID=$(terraform output -raw supabase_production_project_id)
            echo "SUPABASE_PROJECT_ID_PRODUCTION=$SUPABASE_PROJECT_ID" >> $GITHUB_OUTPUT
          fi

          if [ -z "$SUPABASE_PROJECT_ID" ]; then
            echo "Error: Supabase project ID not found"
            exit 1
          fi

  deploy-bff:
    needs:
      - define-matrix
      - build-dart-engine
      - get-supabase-connection-info
    strategy:
      matrix:
        environment: ${{ fromJson(needs.define-matrix.outputs.environments) }}
    outputs:
      deployment_url: ${{ steps.extract-deployment-url.outputs.DEPLOYMENT_URL }}
      logs: ${{ steps.extract-logs.outputs.LOG }}
    runs-on: ubuntu-24.04
    env:
      MISE_ENV: ci
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Download Dart Engine Artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: bff-engine-artifact-${{ matrix.environment }}
          path: bff/bridge/engine-artifact

      - name: Extract SOPS secrets
        run: |
          mkdir -p ~/.config/mise
          echo "${{ secrets.SOPS_FILE }}" > ~/.config/mise/flutterkaigi.txt

      # https://github.com/jdx/mise-action
      - name: Install Mise dependencies
        uses: jdx/mise-action@5083fe46898c414b2475087cc79da59e7da859e8 # v2.1.11
        with:
          install_args: "bun"

      - name: Set environment variables
        run: |
          for line in $(mise env --dotenv); do
            echo $line >> "$GITHUB_ENV"
            echo "::add-mask::${line#*=}"
          done

      - name: Install dependencies
        working-directory: bff/bridge
        run: bun install --frozen-lockfile

      - name: Check main.wasm exists
        working-directory: bff/bridge/engine-artifact
        run: |
          if [ ! -f "main.wasm" ]; then
            echo "Error: main.wasm not found!"
            exit 1
          fi

      - name: Deploy BFF (staging)
        id: deploy-bff-staging
        working-directory: bff/bridge
        if: ${{ matrix.environment == 'staging' }}
        env:
          SUPABASE_PROJECT_ID: ${{ needs.get-supabase-connection-info.outputs.SUPABASE_PROJECT_ID_STAGING }}
        run: |
          {
            echo "LOG<<EOL"
            # SET SUPABASE_URL
            SUPABASE_URL="https://$(echo $SUPABASE_PROJECT_ID).supabase.co"
            echo $SUPABASE_URL | bunx wrangler versions secret \
                --env staging \
                put SUPABASE_URL

            # SET SUPABASE_SERVICE_ROLE_KEY_STAGING
            echo $SUPABASE_SERVICE_ROLE_KEY_STAGING | bunx wrangler \
                versions secret \
                --env staging \
                put SUPABASE_SERVICE_ROLE_KEY

            bunx wrangler versions upload \
              --env staging \
              --var COMMIT_HASH:$(git rev-parse HEAD) \
              --minify 2>&1
            echo "EOL"
          } | tee -a $GITHUB_OUTPUT

      - name: Deploy BFF (production)
        id: deploy-bff-production
        working-directory: bff/bridge
        if: ${{ matrix.environment == 'production' }}
        env:
          SUPABASE_PROJECT_ID: ${{ needs.get-supabase-connection-info.outputs.SUPABASE_PROJECT_ID_PRODUCTION }}
        run: |
          {
            echo "LOG<<EOL"

            # SET SUPABASE_URL
            SUPABASE_URL="https://$(echo $SUPABASE_PROJECT_ID).supabase.co"
            echo $SUPABASE_URL | bunx wrangler secret \
                --env production \
                put SUPABASE_URL

            # SET SUPABASE_SERVICE_ROLE_KEY_PRODUCTION
            echo $SUPABASE_SERVICE_ROLE_KEY_PRODUCTION | bunx wrangler secret \
                --env production \
                put SUPABASE_SERVICE_ROLE_KEY

            bunx wrangler deploy \
              --env production \
              --var COMMIT_HASH:$(git rev-parse HEAD) \
              --minify 2>&1
            echo "EOL"
          } | tee -a $GITHUB_OUTPUT

      - name: Set logs
        id: set-logs
        run: |
          function get-log() {
            if [ "${{ matrix.environment }}" = "production" ]; then
              echo '${{ steps.deploy-bff-production.outputs.LOG }}'
            else
              echo '${{ steps.deploy-bff-staging.outputs.LOG }}'
            fi
          }

          {
            echo "LOG<<EOL"
            get-log
            echo "EOL"
          } | tee -a $GITHUB_OUTPUT

      - name: Extract deployment URL
        id: extract-deployment-url
        run: |
          if [ "${{ matrix.environment }}" = "production" ]; then
            # productionのデプロイは`2025-bff.flutterkaigi.jp`で固定値なので、その値を格納
            DEPLOYMENT_URL="https://2025-bff.flutterkaigi.jp"
          else
            DEPLOYMENT_URL=$(echo '${{ steps.set-logs.outputs.LOG }}' | grep -o 'https://[^ ]*' | head -n 1)
          fi
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Extract timestamp
        id: extract-timestamp
        env:
          TZ: Asia/Tokyo
        run: |
          echo "timestamp=$(date -Iseconds )" >> $GITHUB_OUTPUT

      - name: Extract logs
        id: extract-logs
        run: |
          echo "LOG<<EOF" >> $GITHUB_OUTPUT
          cat <<EOL | tee -a $GITHUB_OUTPUT
          ## 🌍️ BFF Deployment
          🔗URL: ${{ steps.extract-deployment-url.outputs.DEPLOYMENT_URL }}

          🔑Commit Hash: \`${{ github.sha }}\`
          📅Timestamp: \`${{ steps.extract-timestamp.outputs.TIMESTAMP }}\`

          <details>
          <summary><h2>📦️ Build Logs</h2></summary>

          \`\`\`log
          ${{ needs.build-dart-engine.outputs.log }}
          \`\`\`
          </details>

          <details>
          <summary><h2>✈️ Deployment Logs</h2></summary>

          \`\`\`log
          ${{ steps.set-logs.outputs.LOG }}
          \`\`\`
          </details>
          EOL
          echo "EOF" >> $GITHUB_OUTPUT

      # https://github.com/thollander/actions-comment-pull-request
      - name: Comment PR
        uses: thollander/actions-comment-pull-request@24bffb9b452ba05a4f3f77933840a6a841d1b32b # v3.0.1
        if: ${{ github.event_name == 'pull_request' }}
        with:
          message: |
            ${{ steps.extract-logs.outputs.LOG }}
          comment-tag: deploy-bff

  update-deployment-status:
    runs-on: ubuntu-24.04
    needs:
      - define-matrix
      - build-dart-engine
      - start-deploy-bff
      - deploy-bff
    if: ${{ contains(fromJson(needs.define-matrix.outputs.environments), 'production') }}
    timeout-minutes: 1
    steps:
      - name: Get previous jobs status
        id: get-previous-jobs-status
        run: |
          function echo-needs() {
            echo '${{ toJSON(needs) }}'
          }
          echo-needs
          did_failure=$(echo-needs | jq '[.[].result] | any(. != "success")')
          if [ "$did_failure" = "true" ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      # https://github.com/bobheadxi/deployments
      - name: Update deployment status
        uses: bobheadxi/deployments@648679e8e4915b27893bd7dbc35cb504dc915bc8 # v1.5.0
        id: deployment
        if: ${{ !cancelled() }}
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ steps.get-previous-jobs-status.outputs.status || 'failure' }}
          deployment_id: ${{ needs.start-deploy-bff.outputs.deployment_id }}
          env: bff
          env_url: ${{ needs.deploy-bff.outputs.deployment_url }}
          ref: ${{ github.head_ref }}
          auto_inactive: true
