name: Deploy BFF

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - "bff/**"
  workflow_dispatch:
    inputs:
      deploy-production:
        description: "Deploy to production"
        required: false
        default: false
        type: boolean
      deploy-staging:
        description: "Deploy to staging"
        required: false
        default: false
        type: boolean

concurrency:
  group: "deploy-bff"
  cancel-in-progress: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/bff-engine

jobs:
  define-matrix:
    runs-on: ubuntu-24.04
    timeout-minutes: 1
    outputs:
      environments: ${{ steps.define-matrix.outputs.environments }}
      deploy-production: ${{ steps.define-matrix.outputs.deploy-production }}
      deploy-staging: ${{ steps.define-matrix.outputs.deploy-staging }}
    steps:
      - name: Define matrix
        id: define-matrix
        run: |
          environments=()
          # workflow_dispatchの場合
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ inputs.deploy-staging }}" = "true" ]; then
              environments+=("staging")
            fi
            if [ "${{ inputs.deploy-production }}" = "true" ]; then
              environments+=("production")
            fi
          # pushの場合
          elif [ "${{ github.event_name }}" = "push" ]; then
            environments+=("production")
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            environments+=("staging")
          fi

          # 空だった場合はエラー
          if [ -z "${environments[@]}" ]; then
            echo "Error: No environment selected"
            exit 1
          fi

          echo "Deploying to ${environments[@]}"
          # JSONに変換し、環境変数にセット
          echo "environments=$(jq -c -n '$ARGS.positional' --args "${environments[@]}")" >> $GITHUB_OUTPUT

  start-deploy-bff:
    needs:
      - define-matrix
    if: ${{ contains(fromJson(needs.define-matrix.outputs.environments), 'production') }}
    runs-on: ubuntu-24.04
    timeout-minutes: 1
    outputs:
      deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    steps:
      # https://github.com/bobheadxi/deployments
      - name: Start deployment
        uses: bobheadxi/deployments@648679e8e4915b27893bd7dbc35cb504dc915bc8 # v1.5.0
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: bff
          ref: ${{ github.head_ref }}

  build-and-push-docker:
    needs:
      - define-matrix
    strategy:
      matrix:
        environment: ${{ fromJson(needs.define-matrix.outputs.environments) }}
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      logs: ${{ steps.build-logs.outputs.logs }}
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1

      # https://github.com/docker/login-action
      - name: Log in to Container Registry
        uses: docker/login-action@1f36f5b7a2d2f7bfd524795fc966e6d88c37baa9 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # https://github.com/docker/metadata-action
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@70b2cdc6480c1bd2bb1255b343536f8b7abeb20e # v5.6.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ matrix.environment }}
            type=raw,value=latest,enable={{is_default_branch}}

      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6.9.0
        with:
          context: bff/engine
          file: bff/engine/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.environment }}" >> $GITHUB_OUTPUT

      - name: Capture build logs
        id: build-logs
        run: |
          echo "logs<<EOF" >> $GITHUB_OUTPUT
          echo "✅ Docker image built successfully" >> $GITHUB_OUTPUT
          echo "🏷️ Tags: ${{ steps.meta.outputs.tags }}" >> $GITHUB_OUTPUT
          echo "📦 Digest: ${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  get-supabase-connection-info:
    env:
      MISE_ENV: ci
    needs:
      - define-matrix
    strategy:
      matrix:
        environment: ${{ fromJson(needs.define-matrix.outputs.environments) }}
    outputs:
      SUPABASE_PROJECT_ID_STAGING: ${{ steps.get-supabase-connection-info.outputs.SUPABASE_PROJECT_ID_STAGING }}
      SUPABASE_PROJECT_ID_PRODUCTION: ${{ steps.get-supabase-connection-info.outputs.SUPABASE_PROJECT_ID_PRODUCTION }}
      SUPABASE_URL_STAGING: ${{ steps.get-supabase-connection-info.outputs.SUPABASE_URL_STAGING }}
      SUPABASE_URL_PRODUCTION: ${{ steps.get-supabase-connection-info.outputs.SUPABASE_URL_PRODUCTION }}
    runs-on: ubuntu-24.04
    timeout-minutes: 2
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # https://github.com/jdx/mise-action
      - name: Install Mise dependencies
        uses: jdx/mise-action@5083fe46898c414b2475087cc79da59e7da859e8 # v2.1.11
        with:
          install_args: "terraform"

      - name: Extract SOPS secrets
        run: |
          mkdir -p ~/.config/mise
          echo "${{ secrets.SOPS_FILE }}" > ~/.config/mise/flutterkaigi.txt

      - name: Set environment variables
        run: |
          for line in $(mise env --dotenv); do
            echo $line >> "$GITHUB_ENV"
            echo "::add-mask::${line#*=}"
          done

      - name: Extract backend.tfbackend
        working-directory: terraform/supabase
        run: |
          echo "${{ secrets.TERRAFORM_BACKEND_CONFIGURATION }}" | base64 -d  \
            > backend.tfbackend

      - name: Terraform init
        working-directory: terraform/supabase
        run: terraform init -backend-config=backend.tfbackend

      - name: Get Supabase Connection Info
        working-directory: terraform/supabase
        id: get-supabase-connection-info
        run: |
          if [ "${{ matrix.environment }}" = "staging" ]; then
            SUPABASE_PROJECT_ID=$(terraform output -raw supabase_staging_project_id)
            SUPABASE_URL="https://${SUPABASE_PROJECT_ID}.supabase.co"
            echo "SUPABASE_PROJECT_ID_STAGING=$SUPABASE_PROJECT_ID" >> $GITHUB_OUTPUT
            echo "SUPABASE_URL_STAGING=$SUPABASE_URL" >> $GITHUB_OUTPUT
          else
            SUPABASE_PROJECT_ID=$(terraform output -raw supabase_production_project_id)
            SUPABASE_URL="https://${SUPABASE_PROJECT_ID}.supabase.co"
            echo "SUPABASE_PROJECT_ID_PRODUCTION=$SUPABASE_PROJECT_ID" >> $GITHUB_OUTPUT
            echo "SUPABASE_URL_PRODUCTION=$SUPABASE_URL" >> $GITHUB_OUTPUT
          fi

          if [ -z "$SUPABASE_PROJECT_ID" ]; then
            echo "Error: Supabase project ID not found"
            exit 1
          fi

  # This is a placeholder for actual deployment
  # You would replace this with your actual deployment method
  # (e.g., deploy to Kubernetes, Cloud Run, etc.)
  deploy-bff:
    needs:
      - define-matrix
      - build-and-push-docker
      - get-supabase-connection-info
    strategy:
      matrix:
        environment: ${{ fromJson(needs.define-matrix.outputs.environments) }}
    outputs:
      deployment_url: ${{ steps.set-deployment-info.outputs.DEPLOYMENT_URL }}
      logs: ${{ steps.extract-logs.outputs.LOG }}
    runs-on: ubuntu-24.04
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Simulate deployment - replace with actual deployment steps
      - name: Deploy to ${{ matrix.environment }}
        id: deploy
        run: |
          echo "🚀 Deploying Docker image to ${{ matrix.environment }}"
          echo "📦 Image: ${{ needs.build-and-push-docker.outputs.image }}"
          
          # Add your actual deployment commands here
          # Examples:
          # - kubectl apply -f k8s/
          # - gcloud run deploy --image=${{ needs.build-and-push-docker.outputs.image }}
          # - docker-compose up -d
          
          echo "✅ Deployment completed successfully"

      - name: Set deployment info
        id: set-deployment-info
        env:
          SUPABASE_URL_STAGING: ${{ needs.get-supabase-connection-info.outputs.SUPABASE_URL_STAGING }}
          SUPABASE_URL_PRODUCTION: ${{ needs.get-supabase-connection-info.outputs.SUPABASE_URL_PRODUCTION }}
        run: |
          # Set deployment URL based on environment
          if [ "${{ matrix.environment }}" = "production" ]; then
            DEPLOYMENT_URL="https://2025-bff.flutterkaigi.jp"
          else
            DEPLOYMENT_URL="https://staging-bff.flutterkaigi.jp"
          fi
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          
          # Log environment variables for deployment
          echo "Environment variables configured:"
          if [ "${{ matrix.environment }}" = "staging" ]; then
            echo "SUPABASE_URL=$SUPABASE_URL_STAGING" 
          else
            echo "SUPABASE_URL=$SUPABASE_URL_PRODUCTION"
          fi

      - name: Extract timestamp
        id: extract-timestamp
        env:
          TZ: Asia/Tokyo
        run: |
          echo "timestamp=$(date -Iseconds )" >> $GITHUB_OUTPUT

      - name: Extract logs
        id: extract-logs
        run: |
          echo "LOG<<EOF" >> $GITHUB_OUTPUT
          cat <<EOL | tee -a $GITHUB_OUTPUT
          ## 🐳 BFF Docker Deployment
          🔗URL: ${{ steps.set-deployment-info.outputs.DEPLOYMENT_URL }}
          📦Image: \`${{ needs.build-and-push-docker.outputs.image }}\`

          🔑Commit Hash: \`${{ github.sha }}\`
          📅Timestamp: \`${{ steps.extract-timestamp.outputs.TIMESTAMP }}\`

          <details>
          <summary><h3>🏗️ Build Logs</h3></summary>

          \`\`\`log
          ${{ needs.build-and-push-docker.outputs.logs }}
          \`\`\`
          </details>

          <details>
          <summary><h3>🚀 Deployment Logs</h3></summary>

          \`\`\`log
          ${{ steps.deploy.outputs.log || '✅ Deployment completed successfully' }}
          \`\`\`
          </details>

          ## 🔧 Configuration
          - Environment: \`${{ matrix.environment }}\`
          - Docker Registry: \`${{ env.REGISTRY }}\`
          - Image Digest: \`${{ needs.build-and-push-docker.outputs.digest }}\`
          EOL
          echo "EOF" >> $GITHUB_OUTPUT

      # https://github.com/thollander/actions-comment-pull-request
      - name: Comment PR
        uses: thollander/actions-comment-pull-request@24bffb9b452ba05a4f3f77933840a6a841d1b32b # v3.0.1
        if: ${{ github.event_name == 'pull_request' }}
        with:
          message: |
            ${{ steps.extract-logs.outputs.LOG }}
          comment-tag: deploy-bff

  update-deployment-status:
    runs-on: ubuntu-24.04
    needs:
      - define-matrix
      - build-and-push-docker
      - start-deploy-bff
      - deploy-bff
    if: ${{ contains(fromJson(needs.define-matrix.outputs.environments), 'production') }}
    timeout-minutes: 1
    steps:
      - name: Get previous jobs status
        id: get-previous-jobs-status
        run: |
          function echo-needs() {
            echo '${{ toJSON(needs) }}'
          }
          echo-needs
          did_failure=$(echo-needs | jq '[.[].result] | any(. != "success")')
          if [ "$did_failure" = "true" ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      # https://github.com/bobheadxi/deployments
      - name: Update deployment status
        uses: bobheadxi/deployments@648679e8e4915b27893bd7dbc35cb504dc915bc8 # v1.5.0
        id: deployment
        if: ${{ !cancelled() }}
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ steps.get-previous-jobs-status.outputs.status || 'failure' }}
          deployment_id: ${{ needs.start-deploy-bff.outputs.deployment_id }}
          env: bff
          env_url: ${{ needs.deploy-bff.outputs.deployment_url }}
          ref: ${{ github.head_ref }}
          auto_inactive: true
