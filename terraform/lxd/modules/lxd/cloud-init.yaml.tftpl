#cloud-config

hostname: flutterkaigi-2025-monitoring
locale: ja_JP.UTF-8
timezone: Asia/Tokyo

package_update: true
package_upgrade: true
packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg
  - lsb-release
  - docker.io
  - docker-compose-v2
  - micro
  - fish

users:
  - name: monitoring
    gecos: FlutterKaigi Monitoring User
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    groups: sudo, docker
    shell: /usr/bin/fish
    lock_passwd: false

runcmd:
  - install -m 0755 -d /etc/apt/keyrings
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
  - chmod a+r /etc/apt/keyrings/docker.asc
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  - apt-get update
  - apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  - systemctl enable docker
  - systemctl start docker
  - chown -R monitoring:monitoring /opt/monitoring
  - chmod -R 755 /opt/monitoring
  - chsh -s /usr/bin/fish monitoring
  - mkdir -p /home/monitoring/.config/fish
  - chown -R monitoring:monitoring /home/monitoring/.config
  - su - monitoring -c "cd /opt/monitoring && docker compose up -d"

write_files:
  - path: /opt/monitoring/compose.yaml
    content: |
      networks:
        monitoring:
          driver: bridge

      volumes:
        grafana-data:
        loki-data:
        tempo-data:
        prometheus-data:
        pyroscope-data:

      services:
        alloy:
          image: grafana/alloy:latest
          container_name: alloy
          restart: unless-stopped
          networks:
            - monitoring
          ports:
            - "12345:12345"  # Alloy UI
            - "4317:4317"    # OTLP gRPC receiver
            - "4318:4318"    # OTLP HTTP receiver
            - "4100:4100"    # Pyroscope HTTP receiver
            - "9411:9411"    # Zipkin receiver
            - "14268:14268"  # Jaeger HTTP receiver
          volumes:
            - ./alloy/config.alloy:/etc/alloy/config.alloy
            - /var/log:/var/log:ro
          command:
            - run
            - --server.http.listen-addr=0.0.0.0:12345
            - --storage.path=/var/lib/alloy/data
            - /etc/alloy/config.alloy
          environment:
            - HOSTNAME=alloy
          depends_on:
            - loki
            - tempo

        loki:
          image: grafana/loki:latest
          container_name: loki
          restart: unless-stopped
          networks:
            - monitoring
          ports:
            - "3100:3100"
          volumes:
            - ./loki/config.yaml:/etc/loki/config.yaml
            - loki-data:/loki
          command: -config.file=/etc/loki/config.yaml
          environment:
            - TZ=Asia/Tokyo

        tempo:
          image: grafana/tempo:latest
          container_name: tempo
          restart: unless-stopped
          networks:
            - monitoring
          ports:
            - "3200:3200"   # Tempo HTTP
            - "9095:9095"   # Tempo gRPC
            - "4319:4317"   # OTLP gRPC (内部用)
          volumes:
            - ./tempo/config.yaml:/etc/tempo/config.yaml
            - tempo-data:/var/tempo
          command: -config.file=/etc/tempo/config.yaml
          environment:
            - TZ=Asia/Tokyo

        prometheus:
          image: prom/prometheus:latest
          container_name: prometheus
          restart: unless-stopped
          networks:
            - monitoring
          ports:
            - "9090:9090"
          volumes:
            - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
            - prometheus-data:/prometheus
          command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/usr/share/prometheus/console_libraries'
            - '--web.console.templates=/usr/share/prometheus/consoles'
            - '--web.enable-lifecycle'
            - '--web.enable-remote-write-receiver'
            - '--enable-feature=native-histograms'
            - '--enable-feature=exemplar-storage'
          environment:
            - TZ=Asia/Tokyo

        pyroscope:
          image: grafana/pyroscope:latest
          container_name: pyroscope
          restart: unless-stopped
          networks:
            - monitoring
          ports:
            - "4040:4040"   # Pyroscope HTTP
          volumes:
            - ./pyroscope/config.yaml:/etc/pyroscope/config.yaml
            - pyroscope-data:/var/lib/pyroscope
          command: -config.file=/etc/pyroscope/config.yaml
          environment:
            - TZ=Asia/Tokyo

        cadvisor:
          image: gcr.io/cadvisor/cadvisor:latest
          container_name: cadvisor
          restart: unless-stopped
          networks:
            - monitoring
          ports:
            - "8080:8080"
          volumes:
            - /:/rootfs:ro
            - /var/run:/var/run:ro
            - /sys:/sys:ro
            - /var/lib/docker/:/var/lib/docker:ro
            - /dev/disk/:/dev/disk:ro
          privileged: true
          devices:
            - /dev/kmsg
          command:
            - '--housekeeping_interval=30s'
            - '--docker_only=false'
            - '--store_container_labels=false'

        node-exporter:
          image: prom/node-exporter:latest
          container_name: node-exporter
          restart: unless-stopped
          networks:
            - monitoring
          ports:
            - "9100:9100"
          volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
          command:
            - '--path.procfs=/host/proc'
            - '--path.sysfs=/host/sys'
            - '--path.rootfs=/rootfs'
            - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
          pid: host

        grafana:
          image: grafana/grafana:latest
          container_name: grafana
          restart: unless-stopped
          networks:
            - monitoring
          ports:
            - "3000:3000"
          volumes:
            - grafana-data:/var/lib/grafana
            - ./grafana/grafana.ini:/etc/grafana/grafana.ini
            - ./grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
            - ./grafana/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
            - ./grafana/dashboards:/var/lib/grafana/dashboards
          environment:
            - TZ=Asia/Tokyo
          depends_on:
            - loki
            - tempo
            - prometheus
            - pyroscope

        cloudflared:
          image: cloudflare/cloudflared:latest
          container_name: cloudflared
          restart: unless-stopped
          environment:
            - TZ=Asia/Tokyo
          command: tunnel run --token ${tunnel_token}
          networks:
            - monitoring

  - path: /opt/monitoring/alloy/config.alloy
    content: |
      logging {
        level  = "info"
        format = "logfmt"
      }

      livedebugging {
        enabled = true
      }

      otelcol.receiver.otlp "default" {
        grpc {
          endpoint = "0.0.0.0:4317"
        }

        http {
          endpoint = "0.0.0.0:4318"
        }

        output {
          metrics = [otelcol.processor.batch.default.input]
          logs    = [otelcol.processor.batch.default.input]
          traces  = [otelcol.processor.batch.default.input]
        }
      }

      pyroscope.receive_http "default" {
        http {
          listen_address = "0.0.0.0"
          listen_port = 4100
        }

        forward_to = [pyroscope.write.pyroscope.receiver]
      }

      otelcol.processor.batch "default" {
        output {
          metrics = [otelcol.exporter.prometheus.default.input]
          logs    = [otelcol.exporter.loki.default.input]
          traces  = [otelcol.exporter.otlp.tempo.input]
        }
      }

      otelcol.exporter.prometheus "default" {
        forward_to = [prometheus.remote_write.local.receiver]
      }

      prometheus.remote_write "local" {
        endpoint {
          url = "http://localhost:9090/api/v1/write"
        }
      }

      otelcol.exporter.loki "default" {
        forward_to = [loki.write.local.receiver]
      }

      loki.write "local" {
        endpoint {
          url = "http://loki:3100/loki/api/v1/push"
        }
      }

      otelcol.exporter.otlp "tempo" {
        client {
          endpoint = "tempo:4317"
          tls {
            insecure = true
          }
        }
      }

      pyroscope.write "pyroscope" {
        endpoint {
          url = "http://pyroscope:4040"
        }
      }

      loki.source.file "system_logs" {
        targets = [
          {__path__ = "/var/log/syslog", job = "system", service = "syslog"},
          {__path__ = "/var/log/auth.log", job = "system", service = "auth"},
        ]
        forward_to = [loki.write.local.receiver]
      }

  - path: /opt/monitoring/loki/config.yaml
    content: |
      auth_enabled: false

      server:
        http_listen_port: 3100
        grpc_listen_port: 9096

      common:
        instance_addr: 127.0.0.1
        path_prefix: /loki
        storage:
          filesystem:
            chunks_directory: /loki/chunks
            rules_directory: /loki/rules
        replication_factor: 1
        ring:
          kvstore:
            store: inmemory

      query_range:
        results_cache:
          cache:
            embedded_cache:
              enabled: true
              max_size_mb: 100

      schema_config:
        configs:
          - from: 2024-01-01
            store: tsdb
            object_store: filesystem
            schema: v13
            index:
              prefix: index_
              period: 24h

      ruler:
        alertmanager_url: http://localhost:9093

      analytics:
        reporting_enabled: false

  - path: /opt/monitoring/pyroscope/config.yaml
    content: |
      target: all

      server:
        http_listen_port: 4040

      distributor:
        ring:
          kvstore:
            store: memberlist

      ingester:
        lifecycler:
          ring:
            kvstore:
              store: memberlist
            replication_factor: 1
          final_sleep: 0s

      memberlist:
        join_members:
          - pyroscope:7946

      storage:
        backend: filesystem
        filesystem:
          path: /var/lib/pyroscope

      querier:
        max_concurrent: 10

      query_frontend:
        address: 0.0.0.0:4040

      analytics:
        reporting_enabled: false

  - path: /opt/monitoring/tempo/config.yaml
    content: |
      server:
        http_listen_port: 3200
        http_server_read_timeout: 5m
        http_server_write_timeout: 5m

      query_frontend:
        metrics:
          concurrent_jobs: 8
          target_bytes_per_job: 1.25e+09
          max_duration: 6h

      querier:
        search:
          query_timeout: 5m

      distributor:
        receivers:
          otlp:
            protocols:
              grpc:
                endpoint: "0.0.0.0:4317"
              http:
                endpoint: "0.0.0.0:4318"

      ingester:
        max_block_duration: 5m

      compactor:
        compaction:
          block_retention: 1h

      metrics_generator:
        registry:
          external_labels:
            source: tempo
            cluster: flutterkaigi-2025
        storage:
          path: /var/tempo/generator/wal
          remote_write:
            - url: http://prometheus:9090/api/v1/write
              send_exemplars: true
        traces_storage:
          path: /var/tempo/generator/traces
        processor:
          service_graphs:
            dimensions: []
            histogram_buckets: [0.1, 0.2, 0.4, 0.8, 1.6, 3.2, 6.4, 12.8]
          span_metrics:
            dimensions: []
            histogram_buckets: [0.002, 0.004, 0.008, 0.016, 0.032, 0.064, 0.128, 0.256, 0.512, 1.024, 2.048, 4.096, 8.192, 16.384]
          local_blocks:
            filter_server_spans: false
            flush_to_storage: true

      storage:
        trace:
          backend: local
          wal:
            path: /var/tempo/wal
          local:
            path: /var/tempo/blocks

      overrides:
        defaults:
          metrics_generator:
            processors: [service-graphs, span-metrics, local-blocks]
            generate_native_histograms: both

  - path: /opt/monitoring/prometheus/prometheus.yml
    content: |
      global:
        scrape_interval: 15s
        evaluation_interval: 15s
        external_labels:
          cluster: 'flutterkaigi-2025'
          environment: 'production'

      scrape_configs:
        - job_name: 'prometheus'
          static_configs:
            - targets: ['localhost:9090']

        - job_name: 'alloy'
          static_configs:
            - targets: ['alloy:12345']

        - job_name: 'loki'
          static_configs:
            - targets: ['loki:3100']

        - job_name: 'tempo'
          static_configs:
            - targets: ['tempo:3200']

        - job_name: 'grafana'
          static_configs:
            - targets: ['grafana:3000']

        - job_name: 'pyroscope'
          static_configs:
            - targets: ['pyroscope:4040']

        - job_name: 'cadvisor'
          static_configs:
            - targets: ['cadvisor:8080']

        - job_name: 'node-exporter'
          static_configs:
            - targets: ['node-exporter:9100']

  - path: /opt/monitoring/grafana/grafana.ini
    content: |
      ##################### Grafana Configuration #####################

      [server]
      protocol = http
      http_port = 3000
      domain = grafana.flutterkaigi.jp
      root_url = https://grafana.flutterkaigi.jp
      enforce_domain = true

      [database]
      type = sqlite3

      [session]
      provider = file

      [security]
      admin_user = admin
      admin_password = flutterkaigi2025
      disable_gravatar = true
      cookie_secure = true
      cookie_samesite = strict
      csrf_always_check = true
      csrf_additional_headers = X-Forwarded-Host

      [users]
      allow_sign_up = false
      auto_assign_org = true
      auto_assign_org_role = Viewer

      [auth]
      disable_login_form = false
      oauth_auto_login = false
      oauth_allow_insecure_email_lookup = false

      [auth.anonymous]
      enabled = false

      [auth.google]
      enabled = true
      client_id = ${google_client_id}
      client_secret = ${google_client_secret}
      scopes = openid email profile
      auth_url = https://accounts.google.com/o/oauth2/v2/auth
      token_url = https://oauth2.googleapis.com/token
      api_url = https://openidconnect.googleapis.com/v1/userinfo
      allowed_domains =
      allow_sign_up = true
      role_attribute_path = contains(email, '@flutterkaigi.jp') && 'Admin' || 'Viewer'

      [analytics]
      reporting_enabled = false
      check_for_updates = false
      check_for_plugin_updates = false

      [log]
      mode = console
      level = info

  - path: /opt/monitoring/grafana/datasources.yaml
    content: |
      apiVersion: 1

      datasources:
        - name: Loki
          type: loki
          access: proxy
          url: http://loki:3100
          isDefault: false
          editable: true
          jsonData:
            maxLines: 1000

        - name: Tempo
          type: tempo
          access: proxy
          url: http://tempo:3200
          isDefault: false
          editable: true
          jsonData:
            httpMethod: GET
            tracesToLogs:
              datasourceUid: loki
            tracesToMetrics:
              datasourceUid: prometheus
            serviceMap:
              datasourceUid: prometheus

        - name: Prometheus
          type: prometheus
          access: proxy
          url: http://prometheus:9090
          isDefault: true
          editable: true

        - name: Pyroscope
          type: grafana-pyroscope-datasource
          access: proxy
          url: http://pyroscope:4040
          isDefault: false
          editable: true
          jsonData:
            minStep: '15s'

  - path: /opt/monitoring/grafana/dashboards.yaml
    content: |
      apiVersion: 1

      providers:
        - name: 'FlutterKaigi Dashboards'
          orgId: 1
          folder: 'FlutterKaigi 2025'
          type: file
          disableDeletion: false
          updateIntervalSeconds: 10
          allowUiUpdates: true
          options:
            path: /var/lib/grafana/dashboards
            foldersFromFilesStructure: true

  - path: /opt/monitoring/README.md
    content: |
      # FlutterKaigi 2025 Monitoring Stack

      ## URL

      - Grafana: http://localhost:3000
        - ユーザー名: admin
        - パスワード: flutterkaigi2025
      - Alloy UI: http://localhost:12345
      - Loki: http://localhost:3100
      - Tempo: http://localhost:3200
      - Prometheus: http://localhost:9090
      - Pyroscope: http://localhost:4040
      - cAdvisor: http://localhost:8080
      - Node Exporter: http://localhost:9100/metrics

      ## OpenTelemetry

      - OTLP gRPC: localhost:4317
      - OTLP HTTP: localhost:4318
      - Zipkin: localhost:9411
      - Jaeger: localhost:14268

      ## Profiling

      - Pyroscope UI: localhost:4040
      - Pyroscope Push: localhost:4100

      ## System Metrics

      - cAdvisor: localhost:8080 (コンテナメトリクス)
      - Node Exporter: localhost:9100 (ホストシステムメトリクス)

  - path: /home/monitoring/.config/fish/config.fish
    owner: monitoring:monitoring
    permissions: '0644'
    content: |
      # Docker Compose aliases
      alias dc='docker compose'
      alias dcu='docker compose up -d --remove-orphans'
      alias dcl='docker compose logs -f -n 0'

      # Change to monitoring directory on startup
      if status is-interactive
          cd /opt/monitoring
      end

      # Welcome message
      echo "🐟 Welcome to FlutterKaigi 2025 Monitoring Stack"
      echo "📁 Current directory: "(pwd)

final_message: |
  FlutterKaigi 2025 Monitoring Stack has been set up!

  Access Grafana at: http://YOUR_HOST_IP:3000
  Username: admin
  Password: flutterkaigi2025

  The cloud-init setup is complete after $UPTIME seconds.
  System will reboot now.

power_state:
  mode: reboot
  message: Rebooting after cloud-init completion
  timeout: 0
  condition: true
